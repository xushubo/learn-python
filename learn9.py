d={'Michel':95,'Bob':75,'Tracy':85}#用dict实现，只需要一个“名字”-“成绩”的对照表，直接根据名字查找成绩，无论这个表有多大，查找速度都不会变慢。
print(d['Michel'])
d['Adam']=67#把数据放入dict的方法，除了初始化时指定外，还可以通过key放入，可以重复添加，但不会有效果
print(d)
d['Adam']=67
print(d)
d['Jack']=90
print(d)
d['Jack']=80#由于一个key只能对应一个value，所以，多次对一个key放入value，后面的值会把前面的值冲掉
print(d)
print('Thomas' in d)#如果key不存在，dict就会报错.要避免key不存在的错误，有两种办法，一是通过in判断key是否存在
print(d.get('Thomas'))#二是通过dict提供的get方法，如果key不存在，可以返回None，或者自己指定的value
print(d.get('thomas',-1))
d.pop('Bob')#要删除一个key，用pop(key)方法，对应的value也会从dict中删除
print(d)
s=set([1,2,3])#创建一个set，需要提供一个list作为输入集合
print(s)#传入的参数[1, 2, 3]是一个list，而显示的{1, 2, 3}只是告诉你这个set内部有1，2，3这3个元素，显示的顺序也不表示set是有序的
s1=set([1,1,2,2,3,3])#重复元素在set中自动被过滤
print(s1)
s.add(4)#通过add(key)方法可以添加元素到set中，可以重复添加，但不会有效果
print(s)
s.add(4)
print(s)
s.remove(4)#通过remove(key)方法可以删除元素
print(s)
s2=set([1,2,3])
s3=set([2,3,4])
print(s2&s3)#set可以看成数学意义上的无序和无重复元素的集合，因此，两个set可以做数学意义上的交集、并集等操作
print(s2|s3)
k=(1,2,3)#k是元组，不可变，所以能作为dict或set的key
d[k]=56
print(d)
s.add(k)
print(s)
y=(1,2,[3,4])#y是元组，但是含有list的元素，所以不能作为dict或set的key
#d[y]=88
#print(d)
#s.add(y)
#print(s)